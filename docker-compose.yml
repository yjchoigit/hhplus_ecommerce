version: "3.1"

services:
  redis_container:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always

  mysql_container:
    container_name: mysql
    image: mysql:8.0.13
    environment:
      MYSQL_DATABASE: ecommerce
      MYSQL_ROOT_PASSWORD: test123
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper_container:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka_container:
    container_name: kafka
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # kafka가 zookeeper에 커넥션하기 위한 대상
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  mysql_data: